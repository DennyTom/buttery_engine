#include QMK_KEYBOARD_H

{includes}

{keycodes}

{pseudolayers}

{keyboard_parameters}

{keymaps}

{buffers}

enum chord_states {{
    IDLE,
    READY,
    ACTIVATED,
    DEACTIVATED,
    PRESS_FROM_ACTIVE,
    FINISHED_FROM_ACTIVE,
    IDLE_IN_DANCE,
    READY_IN_DANCE,
    FINISHED,
    LOCKED,
    READY_LOCKED,
    RESTART,
    IN_ONE_SHOT
}};

struct Chord {{
    HASH_TYPE keycodes_hash;
    uint8_t pseudolayer;
    uint8_t* state;
    uint8_t* counter;
    uint16_t value1;
    uint8_t value2;
    void (*function) (const struct Chord*);
}};

uint8_t current_pseudolayer = DEFAULT_PSEUDOLAYER;
bool lock_next = false;
uint16_t chord_timer = 0;
uint16_t dance_timer = 0;
bool autoshift_mode = true;
uint8_t keycode_index = 0;
uint8_t command_mode = 0;
uint8_t command_ind = 0;
bool in_leader_mode = false;
uint8_t leader_ind = 0;
uint16_t leader_timer = 0;
uint8_t dynamic_macro_mode = false;
uint8_t dynamic_macro_ind = 0;
bool a_key_went_through = false;
struct Chord* last_chord = NULL;

bool handle_US_ANSI_shifted_keys(int16_t keycode, bool in) {{
    bool is_US_ANSI_shifted = true;
    
    int16_t regular_keycode = KC_NO;
    switch (keycode) {{
        case KC_TILDE:
            regular_keycode = KC_GRAVE;
            break;
        case KC_EXCLAIM:
            regular_keycode = KC_1;
            break;
        case KC_AT:
            regular_keycode = KC_2;
            break;
        case KC_HASH:
            regular_keycode = KC_3;
            break;
        case KC_DOLLAR:
            regular_keycode = KC_4;
            break;
        case KC_PERCENT:
            regular_keycode = KC_5;
            break;
        case KC_CIRCUMFLEX:
            regular_keycode = KC_6;
            break;
        case KC_AMPERSAND:
            regular_keycode = KC_7;
            break;
        case KC_ASTERISK:
            regular_keycode = KC_8;
            break;
        case KC_LEFT_PAREN:
            regular_keycode = KC_9;
            break;
        case KC_RIGHT_PAREN:
            regular_keycode = KC_0;
            break;
        case KC_UNDERSCORE:
            regular_keycode = KC_MINUS;
            break;
        case KC_PLUS:
            regular_keycode = KC_EQUAL;
            break;
        case KC_LEFT_CURLY_BRACE:
            regular_keycode = KC_LBRACKET;
            break;
        case KC_RIGHT_CURLY_BRACE:
            regular_keycode = KC_RBRACKET;
            break;
        case KC_PIPE:
            regular_keycode = KC_BSLASH;
            break;
        case KC_COLON:
            regular_keycode = KC_SCOLON;
            break;
        case KC_DOUBLE_QUOTE:
            regular_keycode = KC_QUOTE;
            break;
        case KC_LEFT_ANGLE_BRACKET:
            regular_keycode = KC_COMMA;
            break;
        case KC_RIGHT_ANGLE_BRACKET:
            regular_keycode = KC_DOT;
            break;
        case KC_QUESTION:
            regular_keycode = KC_SLASH;
            break;
        default:
            is_US_ANSI_shifted = false;
    }}
    if (is_US_ANSI_shifted) {{
        if (in) {{
            register_code(KC_LSFT);
            register_code(regular_keycode);
        }} else {{
            unregister_code(regular_keycode);
            unregister_code(KC_LSFT);
        }}
    }}
    return is_US_ANSI_shifted;
}}

void key_in(int16_t keycode) {{
    if (command_mode == 1 && command_ind < COMMAND_MAX_LENGTH) {{
        command_buffer[command_ind] = keycode;
        command_ind++;
        a_key_went_through = true;
    }} else if (in_leader_mode && leader_ind < LEADER_MAX_LENGTH) {{
        leader_buffer[leader_ind] = keycode;
        leader_ind++;
        a_key_went_through = true;
    }} else if (dynamic_macro_mode && dynamic_macro_ind < DYNAMIC_MACRO_MAX_LENGTH) {{
        dynamic_macro_buffer[dynamic_macro_ind] = keycode;
        dynamic_macro_ind++;
        a_key_went_through = true;
    }} else {{
        if (!handle_US_ANSI_shifted_keys(keycode, true)) {{
            register_code(keycode);
        }}
        send_keyboard_report();
        a_key_went_through = true;
    }}
}}

void key_out(int16_t keycode) {{
    if (command_mode == 0) {{
        if (!handle_US_ANSI_shifted_keys(keycode, false)) {{
            if (command_mode == 0 && in_leader_mode == false && dynamic_macro_mode == false) {{
                unregister_code(keycode);
            }}
        }}
        send_keyboard_report();
    }}
}}

void tap_key(int16_t keycode) {{
    key_in(keycode);
    wait_ms(TAP_TIMEOUT);
    key_out(keycode);
}}

void single_dance(const struct Chord* self) {{
    switch (*self->state) {{
        case ACTIVATED:
            key_in(self->value1);
            break;
        case DEACTIVATED:
            key_out(self->value1);
            *self->state = IDLE;
            break;
        case RESTART:
            key_out(self->value1);
            break;
        default:
            break;
    }}
}}

void key_layer_dance(const struct Chord* self) {{
    switch (*self->state) {{
        case ACTIVATED:
            current_pseudolayer = self->value2;
            a_key_went_through = false;
            break;
        case DEACTIVATED:
        case RESTART:
            if (!a_key_went_through) {{
                tap_key(self->value1);
            }}
            current_pseudolayer = self->pseudolayer;
            *self->state = IDLE; // does not have effect if the state was RESTART
            break;
        default:
            break;
    }}
}}

void key_mod_dance(const struct Chord* self) {{
    switch (*self->state) {{
        case ACTIVATED:
            key_in(self->value2);
            a_key_went_through = false;
            break;
        case DEACTIVATED:
        case RESTART:
            key_out(self->value2);
            if (!a_key_went_through) {{
                tap_key(self->value1);
            }}
            *self->state = IDLE; // does not have effect if the state was RESTART
            break;
        default:
            break;
    }}
}}

void key_key_dance(const struct Chord* self) {{
    switch (*self->state) {{
        case ACTIVATED:
            break;
        case DEACTIVATED:
            tap_key(self->value1);
            *self->state = IDLE;
            break;
        case FINISHED:
        case PRESS_FROM_ACTIVE:
            key_in(self->value2);
            break;
        case RESTART:
            key_out(self->value2);
            break;
        default:
            break;
    }}
}}

void autoshift_dance_impl(const struct Chord* self) {{
    switch (*self->state) {{
        case ACTIVATED:
            *self->counter = 0;
            break;
        case DEACTIVATED:
        case RESTART:
            tap_key(self->value1);
            *self->state = IDLE;
            break;
        case FINISHED_FROM_ACTIVE:
            if (*self->counter == (LONG_PRESS_MULTIPLIER - 2)) {{
                key_in(KC_LSFT);
                tap_key(self->value1);
                key_out(KC_LSFT);
                *self->state = IDLE;
                // the skip to IDLE is usually just a lag optimization,
                // in this case it has a logic function, on a short
                // press (still longer than a tap) the key does not get shifted
            }} else {{
                *self->counter += 1;
                *self->state = PRESS_FROM_ACTIVE;
                dance_timer = timer_read();
            }}
            break;
        default:
            break;
    }}
}}

void autoshift_dance(const struct Chord* self) {{
    if (autoshift_mode) {{
        autoshift_dance_impl(self);
    }} else {{
        single_dance(self);
    }}
}}

void autoshift_toggle(const struct Chord* self){{
    if (*self->state == ACTIVATED) {{
        autoshift_mode = !autoshift_mode;
        *self->state = IDLE;
    }}
}}

void temp_pseudolayer(const struct Chord* self) {{
    switch (*self->state) {{
        case ACTIVATED:
            current_pseudolayer = self->value1;
            break;
        case DEACTIVATED:
            current_pseudolayer = self->pseudolayer;
            *self->state = IDLE;
            break;
        case RESTART:
            current_pseudolayer = self->pseudolayer;
            break;
        default:
            break;
    }}
}}

void temp_pseudolayer_alt(const struct Chord* self) {{
    switch (*self->state) {{
        case ACTIVATED:
            current_pseudolayer = self->value1;
            break;
        case DEACTIVATED:
            current_pseudolayer = self->value2;
            *self->state = IDLE;
            break;
        case RESTART:
            current_pseudolayer = self->value2;
            break;
        default:
            break;
    }}
}}

void perm_pseudolayer(const struct Chord* self) {{
    if (*self->state == ACTIVATED) {{
        current_pseudolayer = self->value1;
        *self->state = IDLE;
    }}
}}

void switch_layer(const struct Chord* self) {{
    if (*self->state == ACTIVATED) {{
        layer_move(self->value1);
        *self->state = IDLE;
    }}
}}

void lock(const struct Chord* self) {{
    if (*self->state == ACTIVATED) {{
        lock_next = true;
        *self->state = IDLE;
    }}
}}

void one_shot_key(const struct Chord* self) {{
    switch (*self->state) {{
        case ACTIVATED:
            break;
        case DEACTIVATED:
            key_in(self->value1);
            *self->state = IN_ONE_SHOT;
            break;
        case FINISHED:
        case PRESS_FROM_ACTIVE:
            key_in(self->value1);
            a_key_went_through = false;
            break;
        case RESTART:
            if (a_key_went_through) {{
                key_out(self->value1);
            }} else {{
                *self->state = IN_ONE_SHOT;
            }}
        default:
            break;
    }}
}}

void one_shot_layer(const struct Chord* self) {{
    switch (*self->state) {{
        case ACTIVATED:
            break;
        case DEACTIVATED:
            current_pseudolayer = self->value1;
            *self->state = IN_ONE_SHOT;
            break;
        case FINISHED:
        case PRESS_FROM_ACTIVE:
            current_pseudolayer = self->value1;
            a_key_went_through = false;
            break;
        case RESTART:
            if (a_key_went_through) {{
                current_pseudolayer = self->pseudolayer;
            }} else {{
                *self->state = IN_ONE_SHOT;
            }}
        default:
            break;
    }}
}}

void command(const struct Chord* self) {{
    if (*self->state == ACTIVATED) {{
        command_mode++;
        *self->state = IDLE;
    }}
}}

bool identical(uint16_t* buffer1, uint16_t* buffer2) {{
    bool same = true;
    for (int i = 0; i < LEADER_MAX_LENGTH; i++) {{
        same = same && (buffer1[i] == buffer2[i]);
    }}
    return same;
}}

void leader(const struct Chord* self) {{
    if (*self->state == ACTIVATED) {{
        in_leader_mode = true;
        *self->state = IDLE;
    }}
}}

void dynamic_macro_record(const struct Chord* self) {{
    if (*self->state == ACTIVATED) {{
        for (int i = 0; i < DYNAMIC_MACRO_MAX_LENGTH; i++) {{
            dynamic_macro_buffer[i] = 0;
        }}
        dynamic_macro_mode = true;
        *self->state = IDLE;
    }}
}}

void dynamic_macro_next(const struct Chord* self) {{
    if (*self->state == ACTIVATED) {{
        if (dynamic_macro_mode && dynamic_macro_ind < DYNAMIC_MACRO_MAX_LENGTH) {{
            dynamic_macro_buffer[dynamic_macro_ind] = 0;
            dynamic_macro_ind++;
        }}
        *self->state = IDLE;
    }}
}}

void dynamic_macro_end(const struct Chord* self) {{
    if (*self->state == ACTIVATED) {{
        if (dynamic_macro_mode) {{
            dynamic_macro_mode = false;
        }}
        *self->state = IDLE;
    }}
}}

void dynamic_macro_play(const struct Chord* self) {{
    if (*self->state == ACTIVATED) {{
        int ind_start = 0;
        while (ind_start < DYNAMIC_MACRO_MAX_LENGTH) {{
            for (int i = ind_start; i < DYNAMIC_MACRO_MAX_LENGTH; i++) {{
                if (dynamic_macro_buffer[i] == 0) {{
                    break;
                }}
                register_code(dynamic_macro_buffer[i]);
            }}
            send_keyboard_report();
            wait_ms(TAP_TIMEOUT);
            for (int i = ind_start; i < DYNAMIC_MACRO_MAX_LENGTH; i++) {{
                if (dynamic_macro_buffer[i] == 0) {{
                    ind_start = i + 1;
                    break;
                }}
                unregister_code(dynamic_macro_buffer[i]);
            }}
            send_keyboard_report();
        }}
        *self->state = IDLE;
    }}
}}

void string_in(const struct Chord* self) {{
    if (*self->state == ACTIVATED) {{
        char buffer[STRING_MAX_LENGTH];
        strcpy_P(buffer, (char*)pgm_read_word(&(strings[self->value1])));
        send_string(buffer);
    }}
}}

void clear(const struct Chord* self);

void reset_keyboard_kb(void){{
#ifdef WATCHDOG_ENABLE
    MCUSR = 0;
    wdt_disable();
    wdt_reset();
#endif
    reset_keyboard();
}}

void reset(const struct Chord* self) {{
    if (*self->state == ACTIVATED) {{
        reset_keyboard_kb();
    }}
}}

{chords}

bool are_hashed_keycodes_in_sound(HASH_TYPE keycodes_hash, HASH_TYPE sound) {{
    return (keycodes_hash & sound) == keycodes_hash;
}}

uint8_t keycode_to_index(uint16_t keycode) {{
    return keycode - FIRST_INTERNAL_KEYCODE;
}}

void sound_keycode_array(uint16_t keycode) {{
    uint8_t index = keycode_to_index(keycode);
    keycode_index++;
    keycodes_buffer_array[index] = keycode_index;
}}

void silence_keycode_hash_array(HASH_TYPE keycode_hash) {{
    for (int i = 0; i < NUMBER_OF_KEYS; i++) {{
        bool index_in_hash = ((HASH_TYPE) 1 << i) & keycode_hash;
        if (index_in_hash) {{
            uint8_t current_val = keycodes_buffer_array[i];
            keycodes_buffer_array[i] = 0;
            for (int j = 0; j < NUMBER_OF_KEYS; j++) {{
                if (keycodes_buffer_array[j] > current_val) {{
                    keycodes_buffer_array[j]--;
                }}
            }}
            keycode_index--;
        }}
    }}
}}

bool are_hashed_keycodes_in_array(HASH_TYPE keycode_hash) {{
    for (int i = 0; i < NUMBER_OF_KEYS; i++) {{
        bool index_in_hash = ((HASH_TYPE) 1 << i) & keycode_hash;
        bool index_in_array = (bool) keycodes_buffer_array[i];
        if (index_in_hash && !index_in_array) {{
            return false;
        }}
    }}
    return true;
}}

void kill_one_shots(void) {{
    struct Chord chord_storage;
    struct Chord* chord_ptr;
    struct Chord* chord;
    
    for (int i = 0; i < NUMBER_OF_CHORDS; i++) {{
        chord_ptr = (struct Chord*) pgm_read_word (&list_of_chords[i]);
        memcpy_P(&chord_storage, chord_ptr, sizeof(struct Chord));
        chord = &chord_storage;
        
        if (*chord->state == IN_ONE_SHOT) {{
            *chord->state = RESTART;
            chord->function(chord);
            if (*chord->state == RESTART) {{
                *chord->state = IDLE;
            }}
        }}
    }}
}}

void process_finished_dances(void) {{
    struct Chord chord_storage;
    struct Chord* chord_ptr;
    struct Chord* chord;
    
    for (int i = 0; i < NUMBER_OF_CHORDS; i++) {{
        chord_ptr = (struct Chord*) pgm_read_word (&list_of_chords[i]);
        memcpy_P(&chord_storage, chord_ptr, sizeof(struct Chord));
        chord = &chord_storage;
        
        if (*chord->state == ACTIVATED) {{
            *chord->state = PRESS_FROM_ACTIVE;
            chord->function(chord);
            if (a_key_went_through) {{
                kill_one_shots();
            }}
            dance_timer = timer_read();
        }} else if (*chord->state == IDLE_IN_DANCE) {{
            *chord->state = FINISHED;
            chord->function(chord);
            if (*chord->state == FINISHED) {{
                *chord->state = RESTART;
                if (*chord->state == RESTART) {{
                    *chord->state = IDLE;
                }}
            }}
        }} else if (*chord->state == PRESS_FROM_ACTIVE) {{
            *chord->state = FINISHED_FROM_ACTIVE;
            chord->function(chord);
            if (a_key_went_through) {{
                kill_one_shots();
            }}
            dance_timer = timer_read();
        }}
    }}
}}

uint8_t keycodes_buffer_array_min(uint8_t* first_keycode_index) {{
    for (int i = 0; i < NUMBER_OF_KEYS; i++) {{
        if (keycodes_buffer_array[i] == 1) {{
            if (first_keycode_index != NULL) {{
                *first_keycode_index = (uint8_t) i;
            }}
            return 1;
        }}
    }}
    return 0;
}}

void remove_subchords(void) {{
    struct Chord chord_storage;
    struct Chord* chord_ptr;
    struct Chord* chord;
    
    for (int i = 0; i < NUMBER_OF_CHORDS; i++) {{
        chord_ptr = (struct Chord*) pgm_read_word (&list_of_chords[i]);
        memcpy_P(&chord_storage, chord_ptr, sizeof(struct Chord));
        chord = &chord_storage;
        
        if (!(*chord->state == READY || *chord->state == READY_IN_DANCE || *chord->state == READY_LOCKED)) {{
            continue;
        }}
        
        struct Chord chord_storage_2;
        struct Chord* chord_ptr_2;
        struct Chord* chord_2;
        for (int j = 0; j < NUMBER_OF_CHORDS; j++) {{
            if (i == j) {{continue;}}
            
            chord_ptr_2 = (struct Chord*) pgm_read_word (&list_of_chords[j]);
            memcpy_P(&chord_storage_2, chord_ptr_2, sizeof(struct Chord));
            chord_2 = &chord_storage_2;
            
            if (are_hashed_keycodes_in_sound(chord_2->keycodes_hash, chord->keycodes_hash)) {{
                if (*chord_2->state == READY) {{
                    *chord_2->state = IDLE;
                }}
                if (*chord_2->state == READY_IN_DANCE) {{
                    *chord_2->state = IDLE_IN_DANCE;
                }}
                if (*chord_2->state == READY_LOCKED) {{
                    *chord_2->state = LOCKED;
                }}
            }}
        }}
    }}
}}

void process_ready_chords(void) {{
    uint8_t first_keycode_index = 0;
    while (keycodes_buffer_array_min(&first_keycode_index)) {{
        // find ready chords
        struct Chord chord_storage;
        struct Chord* chord_ptr;
        struct Chord* chord;
        
        for (int i = 0; i < NUMBER_OF_CHORDS; i++) {{
            chord_ptr = (struct Chord*) pgm_read_word (&list_of_chords[i]);
            memcpy_P(&chord_storage, chord_ptr, sizeof(struct Chord));
            chord = &chord_storage;
            
            // if the chord does not contain the first keycode
            bool contains_first_keycode = ((uint32_t) 1 << first_keycode_index) & chord->keycodes_hash;
            if (!contains_first_keycode) {{
                continue;
            }}
            
            if (!are_hashed_keycodes_in_array(chord->keycodes_hash)){{
                continue;
            }}
            
            if (*chord->state == LOCKED) {{
                *chord->state = READY_LOCKED;
                continue;
            }}
            
            if (!(chord->pseudolayer == current_pseudolayer || chord->pseudolayer == ALWAYS_ON)) {{
                continue;
            }}
            
            if (*chord->state == IDLE) {{
                *chord->state = READY;
                continue;
            }}
            
            if (*chord->state == IDLE_IN_DANCE) {{
                *chord->state = READY_IN_DANCE;
            }}
        }}
        
        // remove subchords
        remove_subchords();
        
        // execute logic
        // this should be only one chord
        for (int i = 0; i < NUMBER_OF_CHORDS; i++) {{
            chord_ptr = (struct Chord*) pgm_read_word (&list_of_chords[i]);
            memcpy_P(&chord_storage, chord_ptr, sizeof(struct Chord));
            chord = &chord_storage;
            
            if (*chord->state == READY_LOCKED) {{
                *chord->state = RESTART;
                chord->function(chord);
                if (*chord->state == RESTART) {{
                    *chord->state = IDLE;
                }}
                break;
            }}
            
            if (*chord->state == READY || *chord->state == READY_IN_DANCE) {{
                if (last_chord && last_chord != chord) {{
                    process_finished_dances();
                }}
                
                bool lock_next_prev_state = lock_next;
                
                *chord->state = ACTIVATED;
                chord->function(chord);
                dance_timer = timer_read();
                
                if (lock_next && lock_next == lock_next_prev_state) {{
                    lock_next = false;
                    *chord->state = PRESS_FROM_ACTIVE;
                    chord->function(chord);
                    if (*chord->state == PRESS_FROM_ACTIVE) {{
                        *chord->state = LOCKED;
                    }}
                    if (a_key_went_through) {{
                        kill_one_shots();
                    }}
                }}
                break;
            }}
        }}
        
        // silence notes
        silence_keycode_hash_array(chord->keycodes_hash);
    }}
}}

void deactivate_active_chords(uint16_t keycode) {{
    HASH_TYPE hash = (HASH_TYPE)1 << (keycode - SAFE_RANGE);
    bool broken;
    struct Chord chord_storage;
    struct Chord* chord_ptr;
    struct Chord* chord;
    
    for (int i = 0; i < NUMBER_OF_CHORDS; i++) {{
        chord_ptr = (struct Chord*) pgm_read_word (&list_of_chords[i]);
        memcpy_P(&chord_storage, chord_ptr, sizeof(struct Chord));
        chord = &chord_storage;
        
        broken = are_hashed_keycodes_in_sound(hash, chord->keycodes_hash);
        if (!broken) {{
            continue;
        }}
        
        switch (*chord->state) {{
            case ACTIVATED:
                *chord->state = DEACTIVATED;
                chord->function(chord);
                
                if (*chord->state == DEACTIVATED) {{
                    dance_timer = timer_read();
                    *chord->state = IDLE_IN_DANCE;
                }}
                if (*chord->state != IN_ONE_SHOT) {{
                    kill_one_shots();
                }}
                break;
            case PRESS_FROM_ACTIVE:
            case FINISHED_FROM_ACTIVE:
                *chord->state = RESTART;
                chord->function(chord);
                if (*chord->state == RESTART) {{
                    *chord->state = IDLE;
                }}
                kill_one_shots();
                break;
            default:
                break;
        }}
    }}
    
}}

void process_command(void) {{
    command_mode = 0;
    for (int i = 0; i < COMMAND_MAX_LENGTH; i++) {{
        if (command_buffer[i]) {{
            register_code(command_buffer[i]);
        }}
        send_keyboard_report();
    }}
    wait_ms(TAP_TIMEOUT);
    for (int i = 0; i < COMMAND_MAX_LENGTH; i++) {{
        if (command_buffer[i]) {{
            unregister_code(command_buffer[i]);
        }}
        send_keyboard_report();
    }}
    for (int i = 0; i < COMMAND_MAX_LENGTH; i++) {{
        command_buffer[i] = 0;
    }}
    command_ind = 0;
}}

void process_leader(void) {{
    in_leader_mode = false;
    for (int i = 0; i < NUMBER_OF_LEADER_COMBOS; i++) {{
        uint16_t trigger[LEADER_MAX_LENGTH];
        memcpy_P(trigger, leader_triggers[i], LEADER_MAX_LENGTH * sizeof(uint16_t));
        
        if (identical(leader_buffer, trigger)) {{
            (*leader_functions[i])();
            break;
        }}
    }}
    for (int i = 0; i < LEADER_MAX_LENGTH; i++) {{
        leader_buffer[i] = 0;
    }}
}}

bool process_record_user(uint16_t keycode, keyrecord_t *record) {{
    if (keycode < FIRST_INTERNAL_KEYCODE || keycode > LAST_INTERNAL_KEYCODE) {{
        return true;
    }}
    
    if (record->event.pressed) {{
        sound_keycode_array(keycode);
    }} else {{
        process_ready_chords();
        deactivate_active_chords(keycode);
    }}
    chord_timer = timer_read();
    leader_timer = timer_read();
    
    return false;
}}

void matrix_scan_user(void) {{
    bool chord_timer_expired = timer_elapsed(chord_timer) > CHORD_TIMEOUT;
    if (chord_timer_expired && keycodes_buffer_array_min(NULL)) {{
        process_ready_chords();
    }}
    
    bool dance_timer_expired = timer_elapsed(dance_timer) > DANCE_TIMEOUT;
    if (dance_timer_expired) {{ // would love to have && in_dance but not sure how
        process_finished_dances();
    }}
    
    bool in_command_mode = command_mode == 2;
    if (in_command_mode) {{
        process_command();
    }}
    
    bool leader_timer_expired = timer_elapsed(leader_timer) > LEADER_TIMEOUT;
    if (leader_timer_expired && in_leader_mode) {{
        process_leader();
    }}
    
}}

void clear(const struct Chord* self) {{
    if (*self->state == ACTIVATED) {{
        // kill all chords
        struct Chord chord_storage;
        struct Chord* chord_ptr;
        struct Chord* chord;
        
        for (int i = 0; i < NUMBER_OF_CHORDS; i++) {{
            chord_ptr = (struct Chord*) pgm_read_word (&list_of_chords[i]);
            memcpy_P(&chord_storage, chord_ptr, sizeof(struct Chord));
            chord = &chord_storage;
            
            *chord->state = IDLE;
            
            if (chord->counter) {{
                *chord->counter = 0;
            }}
        }}
        
        // clear keyboard
        clear_keyboard();
        send_keyboard_report();
        
        // switch to default pseudolayer
        current_pseudolayer = DEFAULT_PSEUDOLAYER;
        
        // clear all keyboard states
        lock_next = false;
        autoshift_mode = true;
        command_mode = 0;
        in_leader_mode = false;
        leader_ind = 0;
        dynamic_macro_mode = false;
        a_key_went_through = false;
        
        for (int i = 0; i < DYNAMIC_MACRO_MAX_LENGTH; i++) {{
            dynamic_macro_buffer[i] = 0;
        }}
    }}
}}